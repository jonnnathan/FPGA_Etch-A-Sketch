`timescale 1ns / 1ps

module encoder_tb;

    // Parameters
    parameter CLK_PERIOD = 10; // Clock period in ns

    // Signals
    reg clk;
    reg A, B, BTN;
    wire [4:0] EncOut;
    wire [1:0] LED;

    // Instantiate encoder module
    encoder dut (
        .clk(clk),
        .A(A),
        .B(B),
        .BTN(BTN),
        .EncOut(EncOut),
        .LED(LED)
    );

    // Clock generation
    always #((CLK_PERIOD)/2) clk = ~clk;

    // Stimulus
    initial begin
        // Initialize inputs
        clk = 0;
        A = 0;
        B = 0;
        BTN = 0;

        // Reset
        BTN = 1;
        #20;
        BTN = 0;

        // Test clockwise rotation
        A = 0; B = 0;
        #20;
        A = 1; B = 0; // Clockwise rotation
        #20;
        A = 1; B = 1;
        #20;
        A = 0; B = 1;
        #20;
        A = 0; B = 0;
        #20;

        // Test counter-clockwise rotation
        A = 0; B = 0;
        #20;
        A = 0; B = 1; // Counter-clockwise rotation
        #20;
        A = 1; B = 1;
        #20;
        A = 1; B = 0;
        #20;
        A = 0; B = 0;
        #20;

        // Test button press to reset
        BTN = 1;
        #20;
        BTN = 0;
        #20;

        // Test limits: clockwise rotation beyond maximum value
        A = 0; B = 0;
        #20;
        A = 1; B = 0;
        #20;
        A = 1; B = 0;
        #20;
        A = 1; B = 0;
        #20;
        A = 1; B = 0;
        #20;

        // Test limits: counter-clockwise rotation beyond minimum value
        A = 0; B = 0;
        #20;
        A = 0; B = 1;
        #20;
        A = 0; B = 1;
        #20;
        A = 0; B = 1;
        #20;
        A = 0; B = 1;
        #20;

        // Test simultaneous rotation and button press
        BTN = 1;
        #10;
        A = 1; B = 0;
        #10;
        BTN = 0;
        #10;
        A = 0; B = 0;
        #10;
        
        // End simulation
        $finish;
    end

endmodule

